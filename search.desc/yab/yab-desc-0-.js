searchState.loadedDescShard("yab", 0, "YAB is <strong>Y</strong>et <strong>A</strong>nother <strong>B</strong>enchmarking framework powered by …\nHigh-level memory access stats summarized from …\nCollecting benchmark data (i.e., the main / default mode).\nMode in which the bencher is currently executing.\nBenchmarking manager providing ability to define and run …\nBenchmark identifier supplied to <code>Bencher</code> functions.\nInformation about a particular type of operations …\nFunction associated with captured cachegrind stats.\nRaw summary output produced by <code>cachegrind</code>.\nManager of capturing benchmarking stats provided to …\nGuard returned by <code>Capture::start()</code>. When it is dropped, …\nFull stats including cache simulation.\nFull <code>cachegrind</code> stats including cache simulation.\nListing benchmark names. Enabled by specifying <code>--list</code> …\nPrinting benchmark results collected during previous runs. …\nStats produced by <code>cachegrind</code> with disabled cache …\nTesting the benchmark code. Enabled by running benchmarks …\nReturns full stats if they are available.\nBenchmarks a single function. Dropping the output won’t …\nBenchmarks a function with configurable capture interval. …\nAn identity function that <em><strong>hints</strong></em> to the compiler to be …\nStatistics related to data reads.\nStatistics related to data writes.\nReturns the estimated number of CPU cycles using Itamar …\nReturns the filename for this function. For Rust, this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruction-related statistics.\nTotal number of instructions executed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal number of L1 cache hits (including instruction …\nNumber of operations that have missed L1 cache.\nTotal number of L2 / L3 cache hits (including instruction …\nNumber of operations that have missed L2/L3 caches.\nWraps a provided function to create the entrypoint for a …\nCaptures stats inside the provided closure (<strong>not</strong> including …\nGets the benchmarking mode.\nReturns the name of this function.\nCreates an ID consisting of the base function name, and an …\nTotal number of RAM accesses.\nBenchmark reporting.\nCreates a new Rust-like function.\nStarts capturing stats.\nTotal number of operations performed.\nGets the total number of executed instructions.\nTotal number of executed instructions.\nOutput produced by the <code>Bencher</code> for a single benchmark.\nReporter of events for a single benchmark.\nReporter for benchmarking output that allows to extend or …\nReporter of events for a single benchmark run in the test …\nReports a (non-recoverable) error not related to a …\nReports a (non-recoverable) benchmark error.\nFails the test with the specified panic data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitializes a benchmark with the specified ID. Note that …\nInitializes a test with the specified ID.\nFinishes the test successfully.\nReports output for a single benchmark.\nSignals to the reporter that processing tests / benchmarks …\nPrevious stats for the benchmark.\nReports that the benchmark started executing.\nLatest / current stats for the benchmark.\nReports a warning related to the benchmark.")